print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
y <- as.numeric(readline(prompt="Guess:"))
y <- as.numeric(readline(prompt="Guess:"))
print("Higher")
y <- as.integer(readline(prompt="Guess:"))
guess <- function(){
print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
while(x != y ){
y <- as.integer(readline(prompt="Guess:"))
if(y>x){
print("Lower")
y <- as.numeric(readline(prompt="Guess:"))
}
else(y<x){
print("Higher")
y <- as.numeric(readline(prompt="Guess:"))
}
else{
print("Correct!")
}
}
guess <- function(){
print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
while(x != y ){
y <- as.integer(readline(prompt="Guess:"))
if(y>x){
print("Lower")
y <- as.numeric(readline(prompt="Guess:"))
}
else{
print("Higher")
y <- as.numeric(readline(prompt="Guess:"))
}
}
else{
print("Correct!")
}
}
guess <- function(){
print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
while(x != y ){
y <- as.integer(readline(prompt="Guess:"))
if(y>x){
print("Lower")
y <- as.numeric(readline(prompt="Guess:"))
}
else{
print("Higher")
y <- as.numeric(readline(prompt="Guess:"))
}
}
print("Correct!")
}
guess
source(guess)
guess <- function(y){
print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
while(x != y ){
y <- as.integer(readline(prompt="Guess:"))
if(y>x){
print("Lower")
y <- as.numeric(readline(prompt="Guess:"))
}
else{
print("Higher")
y <- as.numeric(readline(prompt="Guess:"))
}
}
print("Correct!")
}
function
28
guess <- function(m){
set.seed(m)
print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
while(x != y ){
y <- as.integer(readline(prompt="Guess:"))
if(y>x){
print("Lower")
y <- as.numeric(readline(prompt="Guess:"))
}
else{
print("Higher")
y <- as.numeric(readline(prompt="Guess:"))
}
}
print("Correct!")
}
function(2)
function()
guess(2)
guess <- function(m){
set.seed(m)
print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
while(x != y ){
if(y>x){
print("Lower")
y <- as.numeric(readline(prompt="Guess:"))
}
else{
print("Higher")
y <- as.numeric(readline(prompt="Guess:"))
}
}
print("Correct!")
}
guess(2)
guess <- function(m){
set.seed(m)
print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
y <- as.numeric(readline(prompt="Guess:"))
while(x != y ){
if(y>x){
print("Lower")
y <- as.numeric(readline(prompt="Guess:"))
}
else{
print("Higher")
y <- as.numeric(readline(prompt="Guess:"))
}
}
print("Correct!")
}
guess(2)
guess
guess()
guess <- function(){
print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
y <- as.numeric(readline(prompt="Guess:"))
while(x != y ){
if(y>x){
print("Lower")
y <- as.numeric(readline(prompt="Guess:"))
}
else{
print("Higher")
y <- as.numeric(readline(prompt="Guess:"))
}
}
print("Correct!")
}
guess()
guess <- function(){
print("I'm thinking of a number 1-100")
x <- sample(1:100, 1)
y=0
y <- as.numeric(readline(prompt="Guess:"))
while(x != y ){
if(y>x){
print("Lower")
y <- as.numeric(readline(prompt="Guess:"))
}
else{
print("Higher")
y <- as.numeric(readline(prompt="Guess:"))
}
}
print("Correct!")
}
guess()
install.packages('stringr')
library(stringr)
install.packages("desolve")
install.packages("deSolve")
library(deSolve)
library(ggplot2)
ddSim<-function(t,y,p){
# "unpack" vectors containing state variables (y) and parameters (p)
N=y
r=p[1]
K=p[2]
# calculate change in state variables with time, given parameter values
# and current value of state variables
dNdt=r*(1-N/K)*N
# return list containing change in state variables with time
return(list(dNdt))
}
params=c(0.2,100)
N0=2
times=1:100
modelSim=ode(y=N0,times=times,func=ddSim,parms=params)
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2])
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2])
ggplot(modelOutput,aes(x=time,y=N))+geom_line()+theme_classic()
library(deSolve)
library(ggplot2)
DiseaseModels<-function(t,y,p){
S = y[1]
I = y[2]
R = y[3]
B = p[1]
G = p[2]
dSdt=-B*I*S
dIdt=B*I*S-G*I
dRdt= G*I
return(list(c(dPrey_dt,dPred_dt)))
}
times=1:500
params=c(0.0005,0.05)
params=c(0.0005,0.05)
population = c(999, 1, 0)
times=1:500
modelSim=ode(y=population,times=times,func=DiseaseModels(),parms=params)
pop = c(999, 1, 0)
modelSim=ode(y=pop,times=times,func=DiseaseModels(),parms=params)
DiseaseModels<-function(t,y,p){
S = y[1]
I = y[2]
R = y[3]
B = p[1]
G = p[2]
dSdt=-B*I*S
dIdt=B*I*S-G*I
dRdt= G*I
return(list(c(dSdt,dIdt,dRdt)))
}
params=c(0.0005,0.05)
pop = c(999, 1, 0)
times=1:500
modelSim=ode(y=pop,times=times,func=DiseaseModels(),parms=params)
modelSim=ode(y=pop,t=times,func=DiseaseModels(),p=params)
modelSim=ode(t=times,y=pop,p=params,func=DiseaseModels())
?modelsim
?ode
DiseaseModels<-function(t,y,p){
S = 999
I = y
R = 0
B = p[1]
G = p[2]
dSdt=-B*I*S
dIdt=B*I*S-G*I
dRdt= G*I
return(list(c(dSdt,dIdt,dRdt)))
}
params=c(0.0005,0.05)
pop = 1
times=1:500
modelSim=ode(y=pop,times=times,func=DiseaseModels(),params=params)
modelSim=ode(op,times=times,func=DiseaseModels(),params=params)
modelSim=ode(pop,times=times,func=DiseaseModels(),params=params)
pop = c(999,1,0)
modelSim=ode(pop,times,func=DiseaseModels(),params=params)
pop = as.vector(c(999,1,0))
times=1:500
modelSim=ode(pop,times,func=DiseaseModels(),params=params)
S = y[1]
y = as.vector(c(999,1,0))
modelSim=ode(y,times,func=DiseaseModels(),params=params)
params=c(0.0005,0.05)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(pop0,times,func=DiseaseModels(),params=params)
pop0
DiseaseModels(t=1:10,y=1:10,p=c(1,3))
modelSim=ode(y=pop0,times=times,func=DiseaseModels,params=params)
modelSim=ode(y=pop0,times=times,func=DiseaseModels,p=params)
times
pop0
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = c(1,2,3))
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
params
DiseaseModels<-function(t,y,p){
Susceptible = y[1]
Infected = y[2]
Resistant = y[3]
B= p[1]
G = p[2]
dSdt=-B*Infected*Susceptible
dIdt=B*Infected*Susceptible-G*Infected
dRdt= G*Infected
return(list(c(dSdt,dIdt,dRdt)))
}
params=c(0.0005,0.05)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
odelOutput=data.frame(time=modelSim[,1],N=modelSim[,2])
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2])
head(modelOutput)
ggplot(modelOutput,aes(x=time,y=N))+geom_line()+theme_classic()
DiseaseModels<-function(t,y,p){
Susceptible = y[1]
Infected = y[2]
Resistant = y[3]
B= p[1]
G = p[2]
dSdt=-B*Infected*Susceptible
dIdt=B*Infected*Susceptible-G*Infected
dRdt= G*Infected
return(list(c(dSdt,dIdt,dRdt)))
}
DiseaseModels(1:10, c(999,1,0), c(0.0005,0.05))
DiseaseModels<-function(t,y,p){
Susceptible = y[1]
Infected = y[2]
Resistant = y[3]
B= p[1]
G = p[2]
dSdt=-B*Infected*Susceptible
dIdt=B*Infected*Susceptible-G*Infected
dRdt= G*Infected
return((c(dSdt,dIdt,dRdt))
}
params=c(0.0005,0.05)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2])
ggplot(modelOutput,aes(x=time,y=N))+geom_line()+theme_classic()
DiseaseModels<-function(t,y,p){
Susceptible = y[1]
Infected = y[2]
Resistant = y[3]
B= p[1]
G = p[2]
dSdt=-B*Infected*Susceptible
dIdt=B*Infected*Susceptible-G*Infected
dRdt= G*Infected
return(c(dSdt,dIdt,dRdt))
}
params=c(0.0005,0.05)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
?list
DiseaseModels<-function(t,y,p){
Susceptible = y[1]
Infected = y[2]
Resistant = y[3]
B= p[1]
G = p[2]
dSdt=-B*Infected*Susceptible
dIdt=B*Infected*Susceptible-G*Infected
dRdt= G*Infected
return(list(c(dSdt,dIdt,dRdt)))
}
params=c(0.0005,0.05)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
head(modelSim)
ggplot(modelOutput,aes(x=time,y=c(1,2,3)))+geom_line
ggplot(modelOutput,aes(x=time,y=c(1,2,3)))+geom_line()
library(deSolve)
library(ggplot2)
DiseaseModels<-function(t,y,p){
S = y[1]
I = y[2]
R = y[3]
B = p[1]
G = p[2]
dSdt=-B*I*S
dIdt=B*I*S-G*I
dRdt= G*I
return(list(c(dSdt,dIdt,dRdt)))
}
DiseaseModels<-function(t,y,p){
Susceptible = y[1]
Infected = y[2]
Resistant = y[3]
B= p[1]
G = p[2]
dSdt=-B*Infected*Susceptible
dIdt=B*Infected*Susceptible-G*Infected
dRdt= G*Infected
return(list(c(dSdt,dIdt,dRdt)))
}
params=c(0.0005,0.05)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2])
ggplot(modelOutput,aes(x=time,y=N))+geom_line()+theme_classic()
head(modelSim)
dim(modelSim)
ggplot(modelSim, aes=(x=time,y=c(1,2,3)))+geom_line()
ggplot(modelSim, aes=(x=time, y=c(1,2,3)))+geom_line()
ggplot(modelSim, aes=(x=time))+geom_line()
modelSim2 <- as.data.frame(modelSim)
ggplot(modelSim2, aes=(x=time))+geom_line()
ggplot(modelSim2, aes=(x=time, y=c(1,2,3)))+geom_line()
params=c(0.0005,0.05)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2])
ggplot(modelOutput,aes(x=time,y=N))+geom_line()+theme_classic()
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2:4])
ggplot(modelOutput,aes(x=time,y=N))+geom_line()+theme_classic()
head(modelOutput)
ggplot(modelOutput,aes(x=time,y=c(N.1,N.2,N.3))+geom_line()+theme_classic()
ggplot(modelOutput,aes(x=time,y=c(N.1,N.2,N.3))+geom_line()+theme_classic()
)
ggplot(modelOutput,aes(x=time,y=c(N.1,N.2,N.3)))+geom_line()+theme_classic()
ggplot(data=modelOutput) + geom_line(aes(x=time,y=N.1),color="firebrick") + geom_line(aes(x=time,y=N.2),color="royalblue")+ geom_line(aes(x=time,y=N.3),color="mediumturquoise") + theme_classic()+ ylab("N")
params=c(0.005,0.5)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2:4])
ggplot(data=modelOutput) + geom_line(aes(x=time,y=N.1),color="firebrick") + geom_line(aes(x=time,y=N.2),color="royalblue")+ geom_line(aes(x=time,y=N.3),color="mediumturquoise") + theme_classic()+ ylab("N")
params=c(0.0001,0.1)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2:4])
ggplot(data=modelOutput) + geom_line(aes(x=time,y=N.1),color="firebrick") + geom_line(aes(x=time,y=N.2),color="royalblue")+ geom_line(aes(x=time,y=N.3),color="mediumturquoise") + theme_classic()+ ylab("N")
ggplot(data=modelOutput) + geom_line(aes(x=time,y=N.1),color="firebrick") + geom_line(aes(x=time,y=N.2),color="royalblue")+ geom_line(aes(x=time,y=N.3),color="green") + theme_classic()+ ylab("N")
params=c(0.00005,0.1)
pop0 = as.vector(c(999,1,0))
times=1:500
modelSim=ode(y=pop0,times=times,func=DiseaseModels,parms = params)
modelOutput=data.frame(time=modelSim[,1],N=modelSim[,2:4])
ggplot(data=modelOutput) + geom_line(aes(x=time,y=N.1),color="firebrick") + geom_line(aes(x=time,y=N.2),color="royalblue")+ geom_line(aes(x=time,y=N.3),color="green") + theme_classic()+ ylab("N")
setwd("C:/Users/DAVIS/Desktop/shell-novice-data/exe11/Intro_Biocomp_ND_317_Tutorial11/")
setwd("C:/Users/DAVIS/Desktop/shell-novice-data/exe11/Intro_Biocomp_ND_317_Tutorial11/Exercise11_files/Problem2/")
fasta=scan(file="Exercise11_files/Problem2/motifsort.fasta", what=character())
fasta=scan(file="motifsort.fasta", what=character())
head(fasta)
library('stringr')
?str_detect
which(str_detect(fasta,"AKKPRVZE"==TRUE))
which(str_detect(fasta,"AKKPRVZ"))
which(str_detect(fasta,"AKKPRVZE"))
list1<-which(str_detect(fasta,"AKKPRVZE"))
list2<-which(str_detect(fasta,"AAQWWRNYGG"))
?writeLines
test1 <- writeLines(fasta[1])
test1 <- writeLines(fasta[3])
?sqe
?seq
seq(from=2, to=length(fasta), by=2)
list1<-which(str_detect(fasta,"AKKPRVZE"))
list2<-which(str_detect(fasta,"AAQWWRNYGG"))
list3<-seq(from=2, to=length(fasta), by=2)
list1 -1
list3 - list1 - list2
list2<-which(str_detect(fasta,"AAQWWRNYGG"))
list3<-seq(from=2, to=length(fasta), by=2)
motif1 <- fasta[list1-1,]
list1_1 <- list1 - 1
motif1 <- fasta[list1_1,]
motif1 <- fasta[list1,]
for(i in 1:length(list3)){
motif1[i] <- fasta[list1_1[i],]
}
for(i in 1:length(list1)){
motif1[i] <- fasta[list1_1[i],]
}
list1_1 <- aslmatrices(list1 - 1)
list1_1 <- as.matrices(list1 - 1)
list1_1 <- as.matrix(list1 - 1)
motif1 <- fasta[list1_1,]
for(i in 1:length(list1)){
motif1[i] <- fasta[list1_1[i],]
}
motif1 <- NULL
motif1 <- fasta[list1_1,]
motif1 <- fasta[which(str_detect(fasta,"AKKPRVZE")),]
motif_1 <- fasta[which(str_detect(fasta,"AKKPRVZE")),]
motif_1 <- fasta[which(str_detect(fasta,"AKKPRVZE"))]
motif1[i] <- fasta[list1_1[i]]
list1<-which(str_detect(fasta,"AKKPRVZE"))
list1_1 <- as.matrix(list1 - 1)
list2<-which(str_detect(fasta,"AAQWWRNYGG"))
list3<-seq(from=2, to=length(fasta), by=2)
motif1[i] <- fasta[list1_1[i]]
motif_1 <- fasta[which(str_detect(fasta,"AKKPRVZE"))-1]
write.table(motif_1, "Motif1.txt")
motif_2 <- fasta[which(str_detect(fasta,"AAQWWRNYGG"))-1]
write.table(motif_2, "Motif2.txt")
list3[1]==list1
list3[1]==list2
for(i in 1:length(list3)){
if(list3[i]==list1){
print("TRUE")
}
}
setdiff(list3,list1)
setdiff(list3,c(list1,list2))
list4 <- setdiff(list3,c(list1,list2))
dim(list1)
length(list1)
length(list2)
length(list3)
length(list4)
list4-1
source('~/.active-rstudio-document', echo=TRUE)
other <- fasta[list4-1]
other <- fasta[list4-1]
write.table(other, "other.txt")
other["4"]
other[4]
